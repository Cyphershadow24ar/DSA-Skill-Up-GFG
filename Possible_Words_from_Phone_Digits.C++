/* PROBLEM : Possible Words From Phone Digits

You are given a keypad (as shown in the diagram) and an array arr[ ] containing digits, 
your task is to list all possible words in any order which can be generated by pressing numbers in arr[] sequentially.

Note: Number 0 and 1 do not map to any letters.
You can return the words in any order, the driver code will print them in sorted order.

Examples :

Input: arr[] = [2, 3]
Output: [ad, ae, af, bd, be, bf, cd, ce, cf]
Explanation: When we press 2 and 3 total 3 x 3 = 9 possible words formed.

Input: arr[] = [2]
Output: [a, b, c]
Explanation: When we press 2 total 3 possible words formed.

Constraints:
1 ≤ arr.size() ≤ 9
0 ≤ arr[i] ≤ 9

SOLUITON :
*/

class Solution {
  public:
    vector<string> possibleWords(vector<int> &arr) {
        vector<string> keypad = {
            "",    "",    "abc", "def",
            "ghi", "jkl", "mno", "pqrs",
            "tuv", "wxyz"
        };

        // Filter out digits with no letters (0 and 1)
        vector<int> digits;
        for (int d : arr) {
            if (d >= 0 && d <= 9 && !keypad[d].empty())
                digits.push_back(d);
        }

        vector<string> result;
        if (digits.empty()) return result; // nothing to form

        string cur;
        function<void(int)> dfs = [&](int idx) {
            if (idx == (int)digits.size()) {
                result.push_back(cur);
                return;
            }
            const string &letters = keypad[digits[idx]];
            for (char ch : letters) {
                cur.push_back(ch);
                dfs(idx + 1);
                cur.pop_back();
            }
        };

        dfs(0);
        return result;
    }
};


